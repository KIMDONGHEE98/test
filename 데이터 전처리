import pandas as pd  # 데이터 불러오기
df = pd.read_csv(r'C:\Users\최미숙\OneDrive\바탕 화면\데이터 분석 부트캠프 관련 파일\2025_Airbnb_NYC_listings.csv')
df

print(df['beds'].isnull().sum())   # 결측치 확인[대괄호 안에 변경해서 각 컬럼별로 확인 함]

# room_type 레이블 인코딩 (room_type이 범주 3가지 이상이라서 레이블 인코딩 실행 함)
import pandas as pd
from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()

df['room_type_encoded'] = le.fit_transform(df['room_type'])

print("\n 레이블 인코딩 후 DataFrame (새로운 컬럼 추가): \n", df)

# price 컬럼 $ 삭제(price 컬럼에 $ 해당 달러 표시 문구가 문자열로 인식이 되어서 삭제 해줌)

# price 컬럼을 문자열 타입으로 변환(혹시 모를 숫자형 데이터나 nan 처리 위함)
df['price'] = df['price'].astype(str)

# $와 , 제거
df['price'] = df['price'].str.replace('$', '', regex = False)
df['price'] = df['price'].str.replace(',', '', regex= False)

# 숫자로 변환할 수 없는 값 (예: 'FREE')을 NAN으로 처리하거나 특정 값으로 대체
df['price'] = pd.to_numeric(df['price'], errors='coerce')

# 각 컬럼별 결측치 제거

df.dropna(subset=['beds','room_type', 'bathrooms', 'bedrooms','price'], inplace=True)

# price 이상치 제거

# IQR 계산

Q1 = df['price'].quantile(0.25)
Q3 = df['price'].quantile(0.75)
IQR = Q3 - Q1

# 이상치 기준 설정
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# 이상치 제거
df[(df['price'] >= lower_bound) & (df['price'] <= upper_bound)]

# beds 이상치 제거

# IQR 계산

Q1 = df['beds'].quantile(0.25)
Q3 = df['beds'].quantile(0.75)
IQR = Q3 - Q1

# 이상치 기준 설정
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# 이상치 제거
df[(df['beds'] >= lower_bound) & (df['beds'] <= upper_bound)]

# bath_rooms 이상치 제거
# IQR 계산

Q1 = df['bathrooms'].quantile(0.25)
Q3 = df['bathrooms'].quantile(0.75)
IQR = Q3 - Q1

# 이상치 기준 설정
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# 이상치 제거
df[(df['bathrooms'] >= lower_bound) & (df['bathrooms'] <= upper_bound)]

# bed_rooms 이상치 제거
# IQR 계산

Q1 = df['bedrooms'].quantile(0.25)
Q3 = df['bedrooms'].quantile(0.75)
IQR = Q3 - Q1

# 이상치 기준 설정
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# 이상치 제거
df[(df['bedrooms'] >= lower_bound) & (df['bedrooms'] <= upper_bound)]

# 상관계수 구하기 (beds & price)

correlation = np.corrcoef(df['price'], df['beds'])[0,1]
print(f"beds 와 price 간의 상관계수: {correlation}")

# 상관계수 구하기 (bath_rooms & price)

correlation = np.corrcoef(df['price'], df['bathrooms'])[0,1]
print(f"bathrooms 와 price 간의 상관계수: {correlation}")

# 상관계수 구하기 (bedrooms & price)

correlation = np.corrcoef(df['price'], df['bedrooms'])[0,1]
print(f"bedrooms 와 price 간의 상관계수: {correlation}")

# 상관계수 구하기 (room_type & price)

correlation = np.corrcoef(df['price'], df['room_type_encoded'])[0,1]
print(f"room_type 와 price 간의 상관계수: {correlation}")

# 히트맵 시각화

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

correlation_matrix = df[['price', 'beds','bathrooms','bedrooms','room_type_encoded']].corr()

print("beds와 price 간의 상관 행렬:\n", correlation_matrix)


# 2. 상관 행렬을 이용하여 히트맵 생성 및 시각화
plt.figure(figsize=(5,4))
sns.heatmap(correlation_matrix,
            annot=True,
            cmap='coolwarm',
            fmt=".2f",
            linewidths=.5,
            cbar=True)

plt.title('Correlation Heatmap: Beds vs Price')
plt.xticks(rotation=45, ha='right')
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()




